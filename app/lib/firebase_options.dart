// File generated by FlutterFire CLI.
// ignore_for_file: type=lint
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
/// 
Future main() async {
  // To load the .env file contents into dotenv.
  // NOTE: fileName defaults to .env and can be omitted in this case.
  // Ensure that the filename corresponds to the path in step 1 and 2.
  await dotenv.load(fileName: ".env");
  //...runapp
}

class DefaultFirebaseOptions {

  
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        return macos;
      case TargetPlatform.windows:
        return windows;
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static FirebaseOptions web = FirebaseOptions(
    apiKey: dotenv.env['APIKEYWEB']!,
    appId: dotenv.env['APPIDWEB']!,
    messagingSenderId: dotenv.env['MESSAGINGSENDERIDWEB']!,
    projectId: dotenv.env['PROJECTIDWEB']!,
    authDomain: dotenv.env['AUTHDOMAINWEB']!,
    storageBucket: dotenv.env['STORAGEBUCKETWEB']!,
    measurementId: dotenv.env['MEASUREMENTIDWEB']!,
  );

  static FirebaseOptions android = FirebaseOptions(
    apiKey: dotenv.env['APIKEYANDROID']!,
    appId: dotenv.env['APPIDANDROID']!,
    messagingSenderId: dotenv.env['MESSAGINGSENDERIDANDROID']!,
    projectId: dotenv.env['PROJECTIDANDROID']!,
    storageBucket: dotenv.env['STORAGEBUCKETANDROID']!,
  );

  static FirebaseOptions ios = FirebaseOptions(
    apiKey: dotenv.env['APIKEYIOS']!,
    appId: dotenv.env['APPIDIOS']!,
    messagingSenderId: dotenv.env['MESSAGINGSENDERIDIOS']!,
    projectId: dotenv.env['PROJECTIDIOS']!,
    storageBucket: dotenv.env['STORAGEBUCKETIOS']!,
    androidClientId: dotenv.env['ANDROIDCLIENTIDIOS']!,
    iosClientId: dotenv.env['IOSCLIENTIDIOS']!,
    iosBundleId: dotenv.env['IOSBUNDLEIDIOS']!,
  );

  static FirebaseOptions macos = FirebaseOptions(
    apiKey: dotenv.env['APIKEYMACOS']!,
    appId: dotenv.env['APPIDMACOS']!,
    messagingSenderId: dotenv.env['MESSAGINGSENDERIDMACOS']!,
    projectId: dotenv.env['PROJECTIDMACOS']!,
    storageBucket: dotenv.env['STORAGEBUCKETMACOS']!,
    androidClientId: dotenv.env['ANDROIDCLIENTIDMACOS']!,
    iosClientId: dotenv.env['IOSCLIENTIDMACOS']!,
    iosBundleId: dotenv.env['IOSBUNDLEIDMACOS']!,
  );

  static FirebaseOptions windows = FirebaseOptions(
    apiKey: dotenv.env['APIKEYWINDOWS']!,
    appId: dotenv.env['APPIDWINDOWS']!,
    messagingSenderId: dotenv.env['MESSAGINGSENDERIDWINDOWS']!,
    projectId: dotenv.env['PROJECTIDWINDOWS']!,
    authDomain: dotenv.env['AUTHDOMAINWINDOWS']!,
    storageBucket: dotenv.env['STORAGEBUCKETWINDOWS']!,
    measurementId: dotenv.env['MEASUREMENTIDWINDOWS']!,
  );
}
